name: Deploy Kesseh Galleries to AWS ECS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: kesseh-galleries
  ECS_SERVICE: kesseh-galleries-service
  ECS_CLUSTER: kesseh-galleries-cluster
  ECS_TASK_DEFINITION: kesseh-galleries-task
  CONTAINER_NAME: kesseh-galleries

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Build application
      run: npm run build

    - name: Verify build output
      run: |
        echo "Checking build output..."
        ls -la dist/
        ls -la dist/assets/ || echo "No assets directory found"
        echo "Checking index.html for asset paths..."
        grep -n "assets/" dist/index.html || echo "No asset references found"

  build-and-deploy:
    name: Build and Deploy to ECS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image..."
        
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push both tagged and latest images
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download current task definition
      run: |
        echo "Downloading current task definition..."
        aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition \
          --region $AWS_REGION > task-definition.json
        
        echo "Current task definition downloaded:"
        cat task-definition.json | jq '.family, .revision'

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📦 Image: ${{ steps.build-image.outputs.image }}"
        echo "🚀 Service: ${{ env.ECS_SERVICE }}"
        echo "🏗️  Cluster: ${{ env.ECS_CLUSTER }}"
        echo "🌍 Region: ${{ env.AWS_REGION }}"
        
        # Get the service status
        echo "📊 Service Status:"
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,TaskDefinition:taskDefinition}'
        
        # Get the load balancer URL (if available)
        echo "🔗 Load Balancer URL:"
        aws elbv2 describe-load-balancers \
          --region ${{ env.AWS_REGION }} \
          --query 'LoadBalancers[?contains(LoadBalancerName, `kesseh-galleries`)].DNSName' \
          --output text || echo "Load balancer URL not found via CLI"